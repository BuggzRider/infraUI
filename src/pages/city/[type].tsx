import SingleMediaRendered from "components/SingleMediaRenderer";
import { SingleMediaOptions } from "components/SingleMediaRenderer/types";
import LayoutContext from "context/layoutContext/layout-context";
import Head from "next/head";
import { useContext } from "react";
import {
  categoryCenterImageContainerStyles,
  categoryCenterImageMediaStyles,
  categoryCenterOverlayTextContainerStyles,
  categoryContainer,
  categoryProductsSectionContainer,
  categorySectionContainer,
  productExtraStyle,
} from "../../styles/pageStyles/category.styles";
import Filters from "components/Filters";
import ProductListItem from "components/ProductListItem";
import { productListMock } from "./mockData";

export default function Category() {
  const { categoryPageConfig } = useContext(LayoutContext);

  return (
    <div css={(theme) => categoryContainer(theme)}>
      <Head>
        <title>Category</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <section css={(theme: any) => categorySectionContainer(theme)}>
        <SingleMediaRendered
          url={categoryPageConfig?.centerVideoObject?.url}
          mediaStyles={(theme: any) => categoryCenterImageMediaStyles(theme)}
          containerStyles={(theme: any) =>
            categoryCenterImageContainerStyles(theme)
          }
          alt={categoryPageConfig?.centerVideoObject?.alt}
          type={SingleMediaOptions.VIDEO}
          shouldShowOverlay={true}
          overlayTextConfig={{
            extraContainerStyles: (theme: any) =>
              categoryCenterOverlayTextContainerStyles(theme),
            ...categoryPageConfig?.centerVideoObject?.overlayTextConfig,
          }}
        />
      </section>
      <section css={(theme: any) => categorySectionContainer(theme)}>
        <Filters
          onFilterChange={() => {}}
          filters={categoryPageConfig.filterConfig}
        />
      </section>
      <section css={(theme: any) => categorySectionContainer(theme)}>
        <div
          css={(theme: any) => categoryProductsSectionContainer(theme)}
        >
          {productListMock.map((product) => (
            <ProductListItem
              key={product.id}
              config={{ ...product, url: `property-details/${product.id}` }}
              extraContainerStyles={(theme: any) => productExtraStyle(theme)}
            />
          ))}
        </div>
      </section>
    </div>
  );
}
